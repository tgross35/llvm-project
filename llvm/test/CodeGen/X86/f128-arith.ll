; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -mtriple=i686-unknown-unknown   -verify-machineinstrs | FileCheck %s --check-prefix=CHECK-32
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -verify-machineinstrs | FileCheck %s --check-prefix=CHECK-64
;
; Test lowering of fp128 intrinsics

define fp128 @test_cbrtf128(fp128 %a) {
; CHECK-32-LABEL: test_cbrtf128:
; CHECK-32:    calll llvm.cbrt.f128@PLT
;
; CHECK-64-LABEL: test_cbrtf128:
; CHECK-64:    jmp llvm.cbrt.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.cbrt.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.cbrt.f128(fp128)


define fp128 @test_ceilf128(fp128 %a) {
; CHECK-32-LABEL: test_ceilf128:
; CHECK-32:    calll ceilf128
;
; CHECK-64-LABEL: test_ceilf128:
; CHECK-64:    jmp ceilf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.ceil.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.ceil.f128(fp128)


define fp128 @test_copysignf128(fp128 %a, fp128 %b) {
; CHECK-32-LABEL: test_copysignf128:
; CHECK-32:       # %bb.0: # %start
; CHECK-32-NEXT:    pushl %ebx
; CHECK-32-NEXT:    .cfi_def_cfa_offset 8
; CHECK-32-NEXT:    pushl %edi
; CHECK-32-NEXT:    .cfi_def_cfa_offset 12
; CHECK-32-NEXT:    pushl %esi
; CHECK-32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-32-NEXT:    .cfi_offset %esi, -16
; CHECK-32-NEXT:    .cfi_offset %edi, -12
; CHECK-32-NEXT:    .cfi_offset %ebx, -8
; CHECK-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-32-NEXT:    movl {{[0-9]+}}(%esp), %edx
; CHECK-32-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-32-NEXT:    movl $-2147483648, %edi # imm = 0x80000000
; CHECK-32-NEXT:    andl {{[0-9]+}}(%esp), %edi
; CHECK-32-NEXT:    movl $2147483647, %ebx # imm = 0x7FFFFFFF
; CHECK-32-NEXT:    andl {{[0-9]+}}(%esp), %ebx
; CHECK-32-NEXT:    orl %edi, %ebx
; CHECK-32-NEXT:    movl %ebx, 12(%eax)
; CHECK-32-NEXT:    movl %esi, 8(%eax)
; CHECK-32-NEXT:    movl %edx, 4(%eax)
; CHECK-32-NEXT:    movl %ecx, (%eax)
; CHECK-32-NEXT:    popl %esi
; CHECK-32-NEXT:    .cfi_def_cfa_offset 12
; CHECK-32-NEXT:    popl %edi
; CHECK-32-NEXT:    .cfi_def_cfa_offset 8
; CHECK-32-NEXT:    popl %ebx
; CHECK-32-NEXT:    .cfi_def_cfa_offset 4
; CHECK-32-NEXT:    retl $4
;
; CHECK-64-LABEL: test_copysignf128:
; CHECK-64:       # %bb.0: # %start
; CHECK-64-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1
; CHECK-64-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-64-NEXT:    orps %xmm1, %xmm0
; CHECK-64-NEXT:    retq
; FIXME: calling long double rather than f128 function
; FIXME: calling long double rather than f128 function
start:
  %0 = tail call fp128 @llvm.copysign.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.copysign.f128(fp128, fp128)


define fp128 @test_cosf128(fp128 %a) {
; CHECK-32-LABEL: test_cosf128:
; CHECK-32:    calll cosf128
;
; CHECK-64-LABEL: test_cosf128:
; CHECK-64:    jmp cosf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.cos.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.cos.f128(fp128)


define fp128 @test_exp2f128(fp128 %a) {
; CHECK-32-LABEL: test_exp2f128:
; CHECK-32:    calll exp2f128
;
; CHECK-64-LABEL: test_exp2f128:
; CHECK-64:    jmp exp2f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.exp2.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.exp2.f128(fp128)


define fp128 @test___exp2f128_finite(fp128 %a) {
; CHECK-32-LABEL: test___exp2f128_finite:
; CHECK-32:    calll llvm.__exp2f128_finite.f128@PLT
;
; CHECK-64-LABEL: test___exp2f128_finite:
; CHECK-64:    jmp llvm.__exp2f128_finite.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.__exp2f128_finite.f128(fp128  %a)
  ret fp128 %0
}

declare fp128 @llvm.__exp2f128_finite.f128(fp128)


define fp128 @test_expf128(fp128 %a) {
; CHECK-32-LABEL: test_expf128:
; CHECK-32:    calll expf128
;
; CHECK-64-LABEL: test_expf128:
; CHECK-64:    jmp expf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.exp.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.exp.f128(fp128)


define fp128 @test___expf128_finite(fp128 %a) {
; CHECK-32-LABEL: test___expf128_finite:
; CHECK-32:    calll llvm.__expf128_finite.f128@PLT
;
; CHECK-64-LABEL: test___expf128_finite:
; CHECK-64:    jmp llvm.__expf128_finite.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.__expf128_finite.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.__expf128_finite.f128(fp128)


define fp128 @test_floorf128(fp128 %a) {
; CHECK-32-LABEL: test_floorf128:
; CHECK-32:    calll floorf128
;
; CHECK-64-LABEL: test_floorf128:
; CHECK-64:    jmp floorf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.floor.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.floor.f128(fp128)


define fp128 @test_fmaf128(fp128 %a, fp128 %b, fp128 %c) {
; CHECK-32-LABEL: test_fmaf128:
; CHECK-32:    calll fmaf128
;
; CHECK-64-LABEL: test_fmaf128:
; CHECK-64:    jmp fmaf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.fma.f128(fp128 %a, fp128 %b, fp128 %c)
  ret fp128 %0
}

declare fp128 @llvm.fma.f128(fp128, fp128, fp128)


define fp128 @test_fmaxf128(fp128 %a, fp128 %b) {
; CHECK-32-LABEL: test_fmaxf128:
; CHECK-32:    calll llvm.fmax.f128@PLT
;
; CHECK-64-LABEL: test_fmaxf128:
; CHECK-64:    jmp llvm.fmax.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.fmax.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.fmax.f128(fp128, fp128)


define fp128 @test_fminf128(fp128 %a, fp128 %b) {
; CHECK-32-LABEL: test_fminf128:
; CHECK-32:    calll llvm.fmin.f128@PLT
;
; CHECK-64-LABEL: test_fminf128:
; CHECK-64:    jmp llvm.fmin.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.fmin.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.fmin.f128(fp128, fp128)


define fp128 @test_fmodf128(fp128 %a, fp128 %b) {
; CHECK-32-LABEL: test_fmodf128:
; CHECK-32:    calll llvm.fmod.f128@PLT
;
; CHECK-64-LABEL: test_fmodf128:
; CHECK-64:    jmp llvm.fmod.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.fmod.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.fmod.f128(fp128, fp128)


define { fp128, i32 } @test_frexpf128(fp128 %a) {
; CHECK-32-LABEL: test_frexpf128:
; CHECK-32:    calll frexpf128
;
; CHECK-64-LABEL: test_frexpf128:
; CHECK-64:    callq frexpf128@PLT
start:
  %0 = tail call { fp128, i32 } @llvm.frexp.f128(fp128 %a)
  ret { fp128, i32 } %0
}

declare { fp128, i32 } @llvm.frexp.f128(fp128)


define fp128 @test_ldexpf128(fp128 %a, i32 %b) {
; CHECK-32-LABEL: test_ldexpf128:
; CHECK-32:    calll ldexpf128
;
; CHECK-64-LABEL: test_ldexpf128:
; CHECK-64:    jmp ldexpf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.ldexp.f128(fp128 %a, i32 %b)
  ret fp128 %0
}

declare fp128 @llvm.ldexp.f128(fp128, i32)


define i64 @test_llrintf128(fp128 %a) {
; CHECK-32-LABEL: test_llrintf128:
; CHECK-32:    calll llrintf128
;
; CHECK-64-LABEL: test_llrintf128:
; CHECK-64:    jmp llrintf128@PLT # TAILCALL
start:
  %0 = tail call i64 @llvm.llrint.f128(fp128 %a)
  ret i64 %0
}

declare i64 @llvm.llrint.f128(fp128)


define i64 @test_llroundf128(fp128 %a) {
; CHECK-32-LABEL: test_llroundf128:
; CHECK-32:    calll llroundf128
;
; CHECK-64-LABEL: test_llroundf128:
; CHECK-64:    jmp llroundf128@PLT # TAILCALL
start:
  %0 = tail call i64 @llvm.llround.i64.f128(fp128 %a)
  ret i64 %0
}

declare i64 @llvm.llround.i64.f128(fp128)


define fp128 @test_log10f128(fp128 %a) {
; CHECK-32-LABEL: test_log10f128:
; CHECK-32:    calll log10f128
;
; CHECK-64-LABEL: test_log10f128:
; CHECK-64:    jmp log10f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.log10.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.log10.f128(fp128)


define fp128 @test___log10f128_finite(fp128 %a) {
; CHECK-32-LABEL: test___log10f128_finite:
; CHECK-32:    calll llvm.__log10f128_finite.f128@PLT
;
; CHECK-64-LABEL: test___log10f128_finite:
; CHECK-64:    jmp llvm.__log10f128_finite.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.__log10f128_finite.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.__log10f128_finite.f128(fp128)


define fp128 @test_log2f128(fp128 %a) {
; CHECK-32-LABEL: test_log2f128:
; CHECK-32:    calll log2f128
;
; CHECK-64-LABEL: test_log2f128:
; CHECK-64:   jmp log2f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.log2.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.log2.f128(fp128)


define fp128 @test___log2f128_finite(fp128 %a) {
; CHECK-32-LABEL: test___log2f128_finite:
; CHECK-32:    calll llvm.__log2f128_finite.f128@PLT
;
; CHECK-64-LABEL: test___log2f128_finite:
; CHECK-64:    jmp llvm.__log2f128_finite.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.__log2f128_finite.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.__log2f128_finite.f128(fp128)


define fp128 @test_logf128(fp128 %a) {
; CHECK-32-LABEL: test_logf128:
; CHECK-32:    calll logf128
;
; CHECK-64-LABEL: test_logf128:
; CHECK-64:    jmp logf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.log.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.log.f128(fp128)


define fp128 @test___logf128_finite(fp128 %a) {
; CHECK-32-LABEL: test___logf128_finite:
; CHECK-32:    calll llvm.__logf128_finite.f128@PLT
;
; CHECK-64-LABEL: test___logf128_finite:
; CHECK-64:    jmp llvm.__logf128_finite.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.__logf128_finite.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.__logf128_finite.f128(fp128)


define i64 @test_lrintf128(fp128 %a) {
; CHECK-32-LABEL: test_lrintf128:
; CHECK-32:    calll lrintf128
;
; CHECK-64-LABEL: test_lrintf128:
; CHECK-64:    jmp lrintf128@PLT # TAILCALL
start:
  %0 = tail call i64 @llvm.lrint.f128(fp128 %a)
  ret i64 %0
}

declare i64 @llvm.lrint.f128(fp128)


define i64 @test_lroundf128(fp128 %a) {
; CHECK-32-LABEL: test_lroundf128:
; CHECK-32:    calll lroundf128
;
; CHECK-64-LABEL: test_lroundf128:
; CHECK-64:    jmp lroundf128@PLT # TAILCALL
start:
  %0 = tail call i64 @llvm.lround.i64.f128(fp128 %a)
  ret i64 %0
}

declare i64 @llvm.lround.i64.f128(fp128)


define fp128 @test_nearbyintf128(fp128 %a) {
; CHECK-32-LABEL: test_nearbyintf128:
; CHECK-32:    calll nearbyintf128
;
; CHECK-64-LABEL: test_nearbyintf128:
; CHECK-64:    jmp nearbyintf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.nearbyint.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.nearbyint.f128(fp128)


define fp128 @test_powf128(fp128 %a, fp128 %b) {
; CHECK-32-LABEL: test_powf128:
; CHECK-32:    calll powf128
;
; CHECK-64-LABEL: test_powf128:
; CHECK-64:    jmp powf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.pow.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.pow.f128(fp128, fp128)


define fp128 @test___powf128_finite(fp128 %a, fp128 %b) {
; CHECK-32-LABEL: test___powf128_finite:
; CHECK-32:    calll llvm.__powf128_finite.f128@PLT
;
; CHECK-64-LABEL: test___powf128_finite:
; CHECK-64:    jmp llvm.__powf128_finite.f128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.__powf128_finite.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.__powf128_finite.f128(fp128, fp128)


define fp128 @test_rintf128(fp128 %a) {
; CHECK-32-LABEL: test_rintf128:
; CHECK-32:    calll rintf128
;
; CHECK-64-LABEL: test_rintf128:
; CHECK-64:    jmp rintf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.rint.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.rint.f128(fp128)


define fp128 @test_roundevenf128(fp128 %a) {
; CHECK-32-LABEL: test_roundevenf128:
; CHECK-32:    calll roundevenf128
;
; CHECK-64-LABEL: test_roundevenf128:
; CHECK-64:    jmp roundevenf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.roundeven.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.roundeven.f128(fp128)


define fp128 @test_roundf128(fp128 %a) {
; CHECK-32-LABEL: test_roundf128:
; CHECK-32:    calll roundf128
;
; CHECK-64-LABEL: test_roundf128:
; CHECK-64:    jmp roundf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.round.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.round.f128(fp128)


define fp128 @test_sinf128(fp128 %a) {
; CHECK-32-LABEL: test_sinf128:
; CHECK-32:    calll sinf128
;
; CHECK-64-LABEL: test_sinf128:
; CHECK-64:    jmp sinf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.sin.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.sin.f128(fp128)


define fp128 @test_sqrtf128(fp128 %a) {
; CHECK-32-LABEL: test_sqrtf128:
; CHECK-32:    calll sqrtf128
;
; CHECK-64-LABEL: test_sqrtf128:
; CHECK-64:    jmp sqrtf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.sqrt.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.sqrt.f128(fp128)


define fp128 @test_truncf128(fp128 %a) {
; CHECK-32-LABEL: test_truncf128:
; CHECK-32:    calll truncf128
;
; CHECK-64-LABEL: test_truncf128:
; CHECK-64:    jmp truncf128@PLT # TAILCALL
start:
  %0 = tail call fp128 @llvm.trunc.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.trunc.f128(fp128)
